{"version":3,"sources":["components/translateField/translateField.module.scss","store/fieldReducer.js","store/buttonReducer.js","components/entryField/EntryField.js","components/outputField/OutputField.js","components/shiftButton/ShiftButton.js","context/ratecontext.js","components/layout/Layout.js","App.js","store/index.js","index.js"],"names":["module","exports","defaultState","text","switchText","err","ADD_TEXT","SWITCH_TEXT","SWAP_TEXT","layoutKey","SWITCH_KEYBOARD","EntryField","props","useSelector","state","entryField","layout","button","className","onChange","e","onChangeEntryField","target","value","placeholder","OutputField","disabled","ShiftButton","onClick","onClickShiftButton","RateContext","createContext","Layout","useContext","App","englayout","heblayout","dispatch","useDispatch","addSwitchText","payload","swapText","type","addSwitchTextAction","fromLayout","toLayout","result","split","map","el","indexOf","push","join","Provider","layoutNew","swapTextAction","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2623bf3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"translateField_field__15xkB\"};","const defaultState = {\n  text: \"\",\n  switchText: \"\",\n  err: false,\n};\n\nconst ADD_TEXT = \"ADD_TEXT\";\nconst SWITCH_TEXT = \"SWITCH_TEXT\";\nconst SWAP_TEXT = \"SWAP_TEXT\";\n\nexport const fieldReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_TEXT:\n      return { ...state, text: action.payload };\n    case SWITCH_TEXT:\n      return {\n        ...state,\n        switchText: action.payload.result,\n        err: action.payload.err,\n      };\n    case SWAP_TEXT:\n      return {\n        ...state,\n        switchText: action.payload.text,\n        text: action.payload.switchText,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addTextAction = (payload) => ({ type: ADD_TEXT, payload });\nexport const addSwitchTextAction = (payload) => ({\n  type: SWITCH_TEXT,\n  payload,\n});\nexport const swapTextAction = (payload) => ({ type: SWAP_TEXT, payload });\n","const defaultState = {\n  layoutKey: \"eng\",\n  err: false,\n};\n\nconst SWITCH_KEYBOARD = \"SWITCH_KEYBOARD\";\n\nexport const buttonReducder = (state = defaultState, action) => {\n  switch (action.type) {\n    case SWITCH_KEYBOARD:\n      return { ...state, layoutKey: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const switchKeyboardAction = (payload) => ({\n  type: SWITCH_KEYBOARD,\n  payload,\n});\n","import React from \"react\";\nimport \"./entryField.scss\";\nimport { useSelector } from \"react-redux\";\n\nconst EntryField = (props) => {\n  const text = useSelector((state) => state.entryField.text);\n  const layout = useSelector((state) => state.button.layoutKey);\n  const newText = (e) => {\n    props.onChangeEntryField(layout, e.target.value);\n  };\n\n  return (\n    <div>\n      <textarea\n        className=\"field\"\n        onChange={newText}\n        placeholder=\"Введите текст\"\n        value={text}\n      ></textarea>\n    </div>\n  );\n};\n\nexport default EntryField;\n","import React from \"react\";\nimport \"./outputField.scss\";\nimport { useSelector } from \"react-redux\";\n\nconst OutputField = (props) => {\n  const switchText = useSelector((state) => state.entryField.switchText);\n  return (\n    <div>\n      <textarea\n        className=\"fieldOut\"\n        value={switchText}\n        disabled={true}\n      ></textarea>\n    </div>\n  );\n};\n\nexport default OutputField;\n","import React from \"react\";\nimport \"./shiftButton.scss\";\nimport { useSelector } from \"react-redux\";\n\nconst ShiftButton = (props) => {\n  const layout = useSelector((state) => state.button.layoutKey);\n  const clickButton = () => {\n    props.onClickShiftButton(layout);\n  };\n\n  return (\n    <div>\n      <button className=\"btn\" onClick={clickButton}>\n        Switch text\n      </button>\n    </div>\n  );\n};\n\nexport default ShiftButton;\n","import { createContext } from \"react\";\n\nexport const RateContext = createContext();\n","import React from \"react\";\nimport \"./layout.scss\";\nimport EntryField from \"../../components/entryField/EntryField\";\nimport OutputField from \"../../components/outputField/OutputField\";\nimport TranslateField from \"../../components/translateField/TranslateField\";\nimport ShiftButton from \"../../components/shiftButton/ShiftButton\";\nimport { useContext } from \"react\";\nimport { RateContext } from \"../../context/ratecontext\";\nimport { useSelector } from \"react-redux\";\n\nconst Layout = (props) => {\n  const { onClickShiftButton, onChangeEntryField } = useContext(RateContext);\n  const layout = useSelector((state) => state.button.layoutKey);\n\n  return (\n    <div>\n      <ShiftButton onClickShiftButton={onClickShiftButton} />\n\n      <div className=\"layout\">\n        <div>{layout == \"eng\" ? \"English keyboard\" : \"Hebrew keyboard\"}</div>\n        <div></div>\n        <div>{layout == \"eng\" ? \"Hebrew keyboard\" : \"English keyboard\"}</div>\n        <EntryField onChangeEntryField={onChangeEntryField} />\n        <div></div>\n        <OutputField />\n        {/* <TranslateField /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import \"./App.css\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addTextAction,\n  addSwitchTextAction,\n  swapTextAction,\n} from \"./store/fieldReducer\";\n\nimport { switchKeyboardAction } from \"./store/buttonReducer\";\nimport Layout from \"./components/layout/Layout\";\nimport { RateContext } from \"./context/ratecontext\";\n\nfunction App() {\n  const englayout = `\\`1234567890-=qwertyuiop[]\\\\asdfghjkl;'zxcvbnm,./~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>? \\n`;\n  const heblayout = `;1234567890-=/'קראטוןםפ][\\\\שדגכעיחלךף,זסבהנמצתץ.~!@#$%^&*)(_+QWERTYUIOP}{|ASDFGHJKL:\"ZXCVBNM><? \\n`;\n\n  const dispatch = useDispatch();\n\n  //const layout = useSelector((state) => state.button.layoutKey);\n  const text = useSelector((state) => state.entryField.text);\n  const switchText = useSelector((state) => state.entryField.switchText);\n  const err = useSelector((state) => state.entryField.err);\n\n  const onClickShiftButton = (layout) => {\n    let layoutNew = \"\";\n    if (layout == \"eng\") {\n      layoutNew = \"heb\";\n    } else {\n      layoutNew = \"eng\";\n    }\n    dispatch(switchKeyboardAction(layoutNew));\n    if (!err) {\n      dispatch(swapTextAction({ text, switchText }));\n    } else {\n      addSwitchText(layoutNew, text);\n    }\n  };\n\n  const onChangeEntryField = (layout, text) => {\n    dispatch(addTextAction(text));\n    addSwitchText(layout, text);\n  };\n\n  const addSwitchText = (layout, text) => {\n    let payload = {};\n    switch (layout) {\n      case \"eng\":\n        payload = swapText(text, englayout, heblayout);\n        break;\n      case \"heb\":\n        payload = swapText(text, heblayout, englayout);\n        break;\n    }\n    dispatch(addSwitchTextAction(payload));\n  };\n\n  const swapText = (text, fromLayout, toLayout) => {\n    let result = [];\n    let err = false;\n    text.split(\"\").map((el) => {\n      if (fromLayout.indexOf(el) === -1) err = true;\n      result.push(toLayout.split(\"\")[fromLayout.indexOf(el)]);\n    });\n    result = err ? \"Ошибка, символ не распознан! \" : result.join(\"\");\n    return { err, result };\n  };\n\n  return (\n    <RateContext.Provider\n      value={{\n        onClickShiftButton: onClickShiftButton,\n        onChangeEntryField: onChangeEntryField,\n      }}\n    >\n      <Layout />\n    </RateContext.Provider>\n  );\n}\nexport default App;\n","import { createStore, combineReducers } from \"redux\";\nimport { fieldReducer } from \"./fieldReducer\";\nimport { buttonReducder } from \"./buttonReducer\";\n\nconst rootReducer = combineReducers({\n  entryField: fieldReducer,\n  button: buttonReducder,\n});\n\nexport const store = createStore(rootReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n//reportWebVitals();\n"],"sourceRoot":""}